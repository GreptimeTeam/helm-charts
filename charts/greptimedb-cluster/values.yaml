image:
  # -- The image registry
  registry: docker.io
  # -- The image repository
  repository: greptime/greptimedb
  # -- The image tag
  tag: "v0.4.2"
  # -- The image pull secrets
  pullSecrets: []

resources:
  # -- The requested resources for the container
  requests:
    cpu: 500m
    memory: 512Mi
  # -- The resources limits for the container
  limits:
    cpu: 500m
    memory: 512Mi

frontend:
  # -- Frontend replicas
  replicas: 1
  # -- Frontend service
  service: {}
  # -- Frontend componentSpec
  componentSpec: {}

  # -- Frontend tls configure
  tls: {}
#    certificates:
#      secretName: greptimedb-frontend-tls
#      secretCreation:
#        enabled: true
#        enableEncryption: false
#        data:
#          ca.crt: ""
#          tls.crt: ""
#          tls.key: ""

meta:
  # -- Meta replicas
  replicas: 1
  # -- Meta etcd endpoints
  etcdEndpoints: "etcd.default.svc.cluster.local:2379"
  # -- Meta componentSpec
  componentSpec: {}

datanode:
  # -- Datanode replicas
  replicas: 3
  # -- Datanode componentSpec
  componentSpec: {}
  storage:
    # -- Storage class for datanode persistent volume
    storageClassName: null
    # -- Storage size for datanode persistent volume
    storageSize: 10Gi
    # -- Storage retain policy for datanode persistent volume
    storageRetainPolicy: Retain
    # -- The wal directory of the storage, default is "/tmp/greptimedb/wal"
    walDir: "/tmp/greptimedb/wal"

initializer:
  # -- Initializer image registry
  registry: docker.io
  # -- Initializer image repository
  repository: greptime/greptimedb-initializer
  # -- Initializer image tag
  tag: 0.1.0-alpha.17

# -- GreptimeDB http service port
httpServicePort: 4000

# -- GreptimeDB grpc service port
grpcServicePort: 4001

# -- GreptimeDB mysql service port
mysqlServicePort: 4002

# -- GreptimeDB postgres service port
postgresServicePort: 4003

# -- GreptimeDB opentsdb service port
openTSDBServicePort: 4242

# -- Configure to prometheus podmonitor
prometheusMonitor: {}
#  enabled: false
#  path: "/metrics"
#  port: "http"
#  interval: "30s"
#  honorLabels: true
#  labelsSelector:
#    release: prometheus

# -- Configure to storage
storage:
#  credentials:
#    secretName: "credentials"

#    secretCreation:
#      # Create the raw secret.
#      enabled: true

#      # Create the sealed secret.
#      # If enableEncryption is true, the credentials should be encrypted.
#      enableEncryption: false
#
#      # If the enableEncryption is true, the data should be set as encrypted data.
#      data:
#        access-key-id: "you-should-set-the-access-key-id-here"
#        secret-access-key: "you-should-set-the-secret-access-key-here"

  # configure to use local storage.
  local: {}
#    directory: /tmp/greptimedb

  # configure to use s3 storage.
  s3: {}
#    bucket: "bucket-name"
#    region: "us-west-2"

#    # The data directory in S3 will be: 's3://<bucket>/<root>/data/...'.
#    root: "mycluster"
#    endpoint: "s3.us-west-2.amazonaws.com"
#    secretName: "credentials"

  # configure to use oss storage.
  oss: {}
#    bucket: "bucket-name"
#    region: "cn-hangzhou"

#    # The data directory in OSS will be: 'oss://<bucket>/<root>/data/...'.
#    root: "mycluster"
#    endpoint: "oss-cn-hangzhou.aliyuncs.com"
#    secretName: "credentials"
