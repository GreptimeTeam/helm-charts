image:
  # -- The image registry
  registry: docker.io
  # -- The image repository
  repository: greptime/greptimedb
  # -- The image tag
  tag: "v0.9.5"
  # -- The image pull secrets
  pullSecrets: []

initializer:
  # -- Initializer image registry
  registry: docker.io
  # -- Initializer image repository
  repository: greptime/greptimedb-initializer
  # -- Initializer image tag
  tag: v0.1.3-alpha.6

base:
  # -- The pod template for base
  podTemplate:
    # -- The base spec of main container
    main:
      resources:
        # -- The requested resources for the container
        requests: {}
        #  cpu: 500m
        #  memory: 512Mi

        # -- The resources limits for the container
        limits: {}
        #  cpu: "1"
        #  memory: "1Gi"

      # -- The environment variables for the container
      env: []

      # -- The command to be executed in the container
      command: []

      # -- The arguments to be passed to the command
      args: []

      # -- The config for startup probe of the main container
      startupProbe: {}
#        httpGet:
#          # -- Path to access on the HTTP server
#          path: /health
#          # -- Name or number of the port to access on the container
#          port: 4000
#          # -- The initial delay seconds for the readiness probe.
#          initialDelaySeconds: 5
#          # -- The timeout seconds for the readiness probe
#          timeoutSeconds: 1
#          # -- The period seconds for the readiness probe
#          periodSeconds: 10
#          # -- The success threshold for the readiness probe
#          successThreshold: 1
#          # -- The failure threshold for the readiness probe
#          failureThreshold: 3

      # -- The config for readiness probe of the main container
      readinessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The config for liveness probe of the main container
      livenessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The configurations for security context of main container.
      securityContext: {}

    # -- The annotations to be created to the pod.
    annotations: {}
    # -- The labels to be created to the pod.
    labels: {}
    # -- The pod node selector
    nodeSelector: {}
    # -- The pod tolerations
    tolerations: []
    # -- The pod affinity
    affinity: {}
    # -- The global service account
    serviceAccountName: ""
    # -- The configurations for pod security context.
    securityContext: {}

# -- Frontend configure
frontend:
  # -- Frontend replicas
  replicas: 1

  # -- Extra toml file of frontend.
  configFile: ""

  # -- Extra raw toml config data of frontend. Skip if the `configFile` is used.
  configData: ""

  # -- The pod template for frontend
  podTemplate:
    # -- The spec of main container
    main:
      # -- The frontend image.
      image: ""

      resources:
        # -- The requested resources for the container
        requests: {}
        #  cpu: "1"
        #  memory: "2Gi"

        # -- The resources limits for the container
        limits: {}
        #  cpu: "1"
        #  memory: "2Gi"

      # -- The environment variables for the container
      env: []

      # -- The command to be executed in the container
      command: []

      # -- The arguments to be passed to the command
      args: []

      # -- The pod volumeMounts
      volumeMounts: []

      # -- The config for startup probe of the main container
      startupProbe: {}
#        httpGet:
#          # -- Path to access on the HTTP server
#          path: /health
#          # -- Name or number of the port to access on the container
#          port: 4000
#          # -- The initial delay seconds for the readiness probe.
#          initialDelaySeconds: 5
#          # -- The timeout seconds for the readiness probe
#          timeoutSeconds: 1
#          # -- The period seconds for the readiness probe
#          periodSeconds: 10
#          # -- The success threshold for the readiness probe
#          successThreshold: 1
#          # -- The failure threshold for the readiness probe
#          failureThreshold: 3

      # -- The config for readiness probe of the main container
      readinessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The config for liveness probe of the main container
      livenessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The configurations for frontend container.
      securityContext: {}

    # -- The annotations to be created to the pod.
    annotations: {}
    # -- The labels to be created to the pod.
    labels: {}
    # -- The pod node selector
    nodeSelector: {}
    # -- The pod tolerations
    tolerations: []
    # -- The pod affinity
    affinity: {}
    # -- The pod volumes
    volumes: []

    serviceAccount:
      # -- Create a service account
      create: false
      # -- The annotations for frontend serviceaccount
      annotations: {}

    # -- The configurations for frontend security context.
    securityContext: {}

  # -- Frontend service
  service: {}

  # -- Frontend tls configure
  tls: {}
#    secretName: greptimedb-frontend-tls

  # -- Logging configuration for frontend, if not set, it will use the global logging configuration.
  logging: {}
#    # -- The log level for greptimedb, only support "debug", "info", "warn", "debug"
#    level: "info"
#
#    # -- The log format for greptimedb, only support "json" and "text"
#    format: "text"
#
#    # -- The logs directory for greptimedb
#    logsDir: "/data/greptimedb/logs"
#
#    # -- Whether to log to stdout only
#    onlyLogToStdout: false
#
#    # -- indicates whether to persist the log with the datanode data storage. It **ONLY** works for the datanode component.
#    persistentWithData: false
#
#    # -- The log filters, use the syntax of `target[span\{field=value\}]=level` to filter the logs.
#    filters: []

# -- Meta configure
meta:
  # -- Meta replicas
  replicas: 1

  # -- Extra toml file of meta.
  configFile: ""

  # -- Extra raw toml config data of meta. Skip if the `configFile` is used.
  configData: ""

  # -- The pod template for meta
  podTemplate:
    # -- The spec of main container
    main:
      # -- The meta image.
      image: ""

      resources:
        # -- The requested resources for the container
        requests: {}
        #  cpu: "1"
        #  memory: "2Gi"

        # -- The resources limits for the container
        limits: {}
        #  cpu: "1"
        #  memory: "2Gi"

      # -- The environment variables for the container
      env: []

      # -- The command to be executed in the container
      command: []

      # -- The arguments to be passed to the command
      args: []

      # -- The pod volumeMounts
      volumeMounts: []

      # -- The config for startup probe of the main container
      startupProbe: {}
#        httpGet:
#          # -- Path to access on the HTTP server
#          path: /health
#          # -- Name or number of the port to access on the container
#          port: 4000
#          # -- The initial delay seconds for the readiness probe.
#          initialDelaySeconds: 5
#          # -- The timeout seconds for the readiness probe
#          timeoutSeconds: 1
#          # -- The period seconds for the readiness probe
#          periodSeconds: 10
#          # -- The success threshold for the readiness probe
#          successThreshold: 1
#          # -- The failure threshold for the readiness probe
#          failureThreshold: 3

      # -- The config for readiness probe of the main container
      readinessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The config for liveness probe of the main container
      livenessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The configurations for meta security context.
      securityContext: {}

    # -- The annotations to be created to the pod.
    annotations: {}
    # -- The labels to be created to the pod.
    labels: {}
    # -- The pod node selector
    nodeSelector: {}
    # -- The pod tolerations
    tolerations: []
    # -- The pod affinity
    affinity: {}
    # -- The pod volumes
    volumes: []

    serviceAccount:
      # -- Create a service account
      create: false
      # -- The annotations for meta serviceaccount
      annotations: {}

    # -- The configurations for meta security context.
    securityContext: {}

  # -- Meta etcd endpoints
  etcdEndpoints: "etcd.etcd-cluster.svc.cluster.local:2379"

  # -- Meta will store data with this key prefix
  storeKeyPrefix: ""

  # -- Whether to enable region failover
  enableRegionFailover: false

  # -- Logging configuration for meta, if not set, it will use the global logging configuration.
  logging: {}
#    # -- The log level for greptimedb, only support "debug", "info", "warn", "debug"
#    level: "info"
#
#    # -- The log format for greptimedb, only support "json" and "text"
#    format: "text"
#
#    # -- The logs directory for greptimedb
#    logsDir: "/data/greptimedb/logs"
#
#    # -- Whether to log to stdout only
#    onlyLogToStdout: false
#
#    # -- indicates whether to persist the log with the datanode data storage. It **ONLY** works for the datanode component.
#    persistentWithData: false
#
#    # -- The log filters, use the syntax of `target[span\{field=value\}]=level` to filter the logs.
#    filters: []

# -- Datanode configure
datanode:
  # -- Datanode replicas
  replicas: 1

  # -- Extra toml file of datanode.
  configFile: ""

  # -- Extra raw toml config data of datanode. Skip if the `configFile` is used.
  configData: ""

  # -- The pod template for datanode
  podTemplate:
    # -- The spec of main container
    main:
      # -- The datanode image.
      image: ""

      resources:
        # -- The requested resources for the container
        requests: {}
        #  cpu: "1"
        #  memory: "2Gi"

        # -- The resources limits for the container
        limits: {}
        #  cpu: "1"
        #  memory: "2Gi"

      # -- The environment variables for the container
      env: []

      # -- The command to be executed in the container
      command: []

      # -- The arguments to be passed to the command
      args: []

      # -- The pod volumeMounts
      volumeMounts: []
      # -- The config for startup probe of the main container
      startupProbe: {}
#        httpGet:
#          # -- Path to access on the HTTP server
#          path: /health
#          # -- Name or number of the port to access on the container
#          port: 4000
#          # -- The initial delay seconds for the readiness probe.
#          initialDelaySeconds: 5
#          # -- The timeout seconds for the readiness probe
#          timeoutSeconds: 1
#          # -- The period seconds for the readiness probe
#          periodSeconds: 10
#          # -- The success threshold for the readiness probe
#          successThreshold: 1
#          # -- The failure threshold for the readiness probe
#          failureThreshold: 3

      # -- The config for readiness probe of the main container
      readinessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The config for liveness probe of the main container
      livenessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The configurations for datanode security context.
      securityContext: {}

    # -- The annotations to be created to the pod.
    annotations: {}
    # -- The labels to be created to the pod.
    labels: {}
    # -- The pod node selector
    nodeSelector: {}
    # -- The pod tolerations
    tolerations: []
    # -- The pod affinity
    affinity: {}
    # -- The pod volumes
    volumes: []

    serviceAccount:
      # -- Create a service account
      create: false
      # -- The annotations for datanode serviceaccount
      annotations: {}

    # -- The configurations for datanode security context.
    securityContext: {}

  storage:
    # -- Storage class for datanode persistent volume
    storageClassName: null
    # -- Storage size for datanode persistent volume
    storageSize: 10Gi
    # -- Storage retain policy for datanode persistent volume
    storageRetainPolicy: Retain
    # -- The dataHome directory, default is "/data/greptimedb/"
    dataHome: "/data/greptimedb"
    # -- The data directory of the storage, default is "/data/greptimedb"
    mountPath: "/data/greptimedb"
    # -- The wal directory of the storage, default is "/data/greptimedb/wal"
    # -- deprecated
    walDir: "/data/greptimedb/wal"

  # -- Logging configuration for datanode, if not set, it will use the global logging configuration.
  logging: {}
#    # -- The log level for greptimedb, only support "debug", "info", "warn", "debug"
#    level: "info"
#
#    # -- The log format for greptimedb, only support "json" and "text"
#    format: "text"
#
#    # -- The logs directory for greptimedb
#    logsDir: "/data/greptimedb/logs"
#
#    # -- Whether to log to stdout only
#    onlyLogToStdout: false
#
#    # -- indicates whether to persist the log with the datanode data storage. It **ONLY** works for the datanode component.
#    persistentWithData: false
#
#    # -- The log filters, use the syntax of `target[span\{field=value\}]=level` to filter the logs.
#    filters: []

# -- Flownode configure. **It's NOT READY YET**
flownode:
  # -- Enable flownode
  enabled: false

  # -- Flownode replicas
  replicas: 1

  # -- Extra toml file of flownode.
  configFile: ""

  # -- Extra raw toml config data of flownode. Skip if the `configFile` is used.
  configData: ""

  # -- Logging configuration for flownode, if not set, it will use the global logging configuration.
  logging: {}
#      # -- The log level for greptimedb, only support "debug", "info", "warn", "debug"
#      level: "info"
#
#      # -- The log format for greptimedb, only support "json" and "text"
#      format: "text"
#
#      # -- The logs directory for greptimedb
#      logsDir: "/data/greptimedb/logs"
#
#      # -- Whether to log to stdout only
#      onlyLogToStdout: false
#
#      # -- indicates whether to persist the log with the datanode data storage. It **ONLY** works for the datanode component.
#      persistentWithData: false
#
#      # -- The log filters, use the syntax of `target[span\{field=value\}]=level` to filter the logs.
#      filters: []

  # -- The pod template for frontend
  podTemplate:
    # -- The spec of main container
    main:
      # -- The flownode image.
      image: ""

      resources:
        # -- The requested resources for the container
        requests: {}
        #  cpu: "1"
        #  memory: "2Gi"

        # -- The resources limits for the container
        limits: {}
        #  cpu: "1"
        #  memory: "2Gi"

      # -- The environment variables for the container
      env: []

      # -- The command to be executed in the container
      command: []

      # -- The arguments to be passed to the command
      args: []

      # -- The pod volumeMounts
      volumeMounts: []

      # -- The config for startup probe of the main container
      startupProbe: {}
#        httpGet:
#          # -- Path to access on the HTTP server
#          path: /health
#          # -- Name or number of the port to access on the container
#          port: 4000
#          # -- The initial delay seconds for the readiness probe.
#          initialDelaySeconds: 5
#          # -- The timeout seconds for the readiness probe
#          timeoutSeconds: 1
#          # -- The period seconds for the readiness probe
#          periodSeconds: 10
#          # -- The success threshold for the readiness probe
#          successThreshold: 1
#          # -- The failure threshold for the readiness probe
#          failureThreshold: 3

      # -- The config for readiness probe of the main container
      readinessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The config for liveness probe of the main container
      livenessProbe: {}
#        httpGet:
#        # -- Path to access on the HTTP server
#          path: /health
#        # -- Name or number of the port to access on the container
#          port: 4000
#        # -- The initial delay seconds for the readiness probe.
#        initialDelaySeconds: 5
#        # -- The timeout seconds for the readiness probe
#        timeoutSeconds: 1
#        # -- The period seconds for the readiness probe
#        periodSeconds: 10
#        # -- The success threshold for the readiness probe
#        successThreshold: 1
#        # -- The failure threshold for the readiness probe
#        failureThreshold: 3

      # -- The configurations for flownode security context.
      securityContext: {}

    # -- The annotations to be created to the pod.
    annotations: {}
    # -- The labels to be created to the pod.
    labels: {}
    # -- The pod node selector
    nodeSelector: {}
    # -- The pod tolerations
    tolerations: []
    # -- The pod affinity
    affinity: {}
    # -- The pod volumes
    volumes: []

    serviceAccount:
      # -- Create a service account
      create: false
      # -- The annotations for flownode serviceaccount
      annotations: {}

    # -- The configurations for flownode security context.
    securityContext: {}

# -- GreptimeDB http service port
httpServicePort: 4000
# -- GreptimeDB grpc service port
grpcServicePort: 4001
# -- GreptimeDB mysql service port
mysqlServicePort: 4002
# -- GreptimeDB postgres service port
postgresServicePort: 4003

# -- Configure to prometheus PodMonitor
prometheusMonitor:
  # -- Create PodMonitor resource for scraping metrics using PrometheusOperator
  enabled: false
  # -- Interval at which metrics should be scraped
  interval: "30s"
  # -- Add labels to the PodMonitor
  labels:
    release: prometheus

# -- Configure to object storage
objectStorage:
#  credentials:
#    secretName: ""

#    # AWS or AliCloud cloudProvider accessKeyID and secretAccessKey
#    accessKeyId: "you-should-set-the-access-key-id-here"
#    secretAccessKey: "you-should-set-the-secret-access-key-here"

#    # GCP cloudProvider serviceAccountKey JSON-formatted base64 value
#    serviceAccountKey: "you-should-set-the-base64-service-account-key-here"

#    # Set the existing secret to get the key's of cloudProvider
#    existingSecretName: ""

  # configure to use s3 storage.
  s3: {}
#    bucket: "bucket-name"
#    region: "us-west-2"

#    # The data directory in S3 will be: 's3://<bucket>/<root>/data/...'.
#    root: "mycluster"
#    endpoint: "s3.us-west-2.amazonaws.com"   # See more detail: https://docs.aws.amazon.com/general/latest/gr/s3.html

  # configure to use oss storage.
  oss: {}
#    bucket: "bucket-name"
#    region: "cn-hangzhou"

#    # The data directory in OSS will be: 'oss://<bucket>/<root>/data/...'.
#    root: "mycluster"
#    endpoint: "oss-cn-hangzhou.aliyuncs.com"

  # configure to use gcs storage
  gcs: {}
  #  bucket: "bucket-name"
  #  scope: "" # example: "https://www.googleapis.com/auth/devstorage.read_write"

  #  # The data directory in gcs will be: 'gcs://<bucket>/<root>/data/...'.
  #  root: "mycluster"
  #  endpoint: "https://storage.googleapis.com"

# -- Configure to remote wal
remoteWal:
  # -- Enable remote wal
  enabled: false
  # -- The remote wal type, only support kafka now.
  kafka:
    # -- The kafka broker endpoints
    brokerEndpoints: []

# -- The static auth for greptimedb, only support one user now(https://docs.greptime.com/user-guide/deployments/authentication/static).
auth:
  # -- Enable static auth
  enabled: false
  # -- The auth file path to store the auth info
  mountPath: "/etc/greptimedb/auth"
  # -- The auth file name, the full path is `${mountPath}/${fileName}`
  fileName: "passwd"
  # -- The users to be created in the auth file
  users:
    - username: "admin"
      password: "admin"

debugPod:
  # -- Enable debug pod
  enabled: false

  # -- The debug pod image
  image:
    registry: docker.io
    repository: greptime/greptime-tool
    tag: "20241107-9c210d18"

  # -- The debug pod resource
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 200m

# -- The monitoring bootstrap configuration
monitoring:
  # -- Enable monitoring
  enabled: false

  # -- Configure the standalone instance for storing monitoring data
  standalone: {}
#    base:
#      main:
#        # -- The standalone image, if not set, it will use the cluster image.
#        image: ""
#
#        resources:
#          # -- The requested resources for monitoring
#          requests: {}
##            cpu: 500m
##            memory: 512Mi
#
#          # -- The resources limits for monitoring
#          limits: {}
##            cpu: "1"
##            memory: "1Gi"
#
#        # -- The environment variables for the container
#        env: []
#
#        # -- The command to be executed in the container
#        command: []
#
#        # -- The arguments to be passed to the command
#        args: []
#
#      # -- The annotations to be created to the pod for monitoring
#      annotations: {}
#
#      # -- The labels to be created to the pod for monitoring
#      labels: {}
#
#      # -- The pod node selector for monitoring
#      nodeSelector: {}
#
#      # -- The pod tolerations for monitoring
#      tolerations: []
#
#      # -- The pod affinity for monitoring
#      affinity: {}
#
#      # -- The global service account for monitoring
#      serviceAccountName: ""

  # -- Configure the logs collection
  logsCollection:
    # -- The greptimedb pipeline for logs collection
    pipeline:
      data: ""

  # -- Configure vector for logs and metrics collection.
  vector:
    # -- vector image registry
    registry: docker.io
    # -- vector image repository
    repository: timberio/vector
    # -- vector image tag
    tag: nightly-alpine

    # -- vector resource
    resources:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        cpu: "50m"
        memory: "64Mi"

# -- Global logging configuration
logging:
  # -- The log level for greptimedb, only support "debug", "info", "warn", "debug"
  level: "info"

  # -- The log format for greptimedb, only support "json" and "text"
  format: "text"

  # -- The logs directory for greptimedb
  logsDir: "/data/greptimedb/logs"

  # -- Whether to log to stdout only
  onlyLogToStdout: false

  # -- indicates whether to persist the log with the datanode data storage. It **ONLY** works for the datanode component.
  persistentWithData: false

  # -- The log filters, use the syntax of `target[span\{field=value\}]=level` to filter the logs.
  filters: []

  # -- The slow query log configuration.
  slowQuery:
    # -- Enable slow query log.
    enabled: false

    # -- The threshold of slow query log in seconds.
    threshold: "10s"

    # -- Sample ratio of slow query log.
    sampleRatio: "1.0"

# -- Deploy grafana for monitoring.
grafana:
  # -- Enable grafana deployment. It needs to enable monitoring `monitoring.enabled: true` first.
  enabled: false

  # -- The default admin username for grafana.
  adminUser: admin

  # -- The default admin password for grafana.
  adminPassword: gt-operator

  # -- The grafana image.
  image:
    # -- The grafana image registry.
    registry: docker.io
    # -- The grafana image repository.
    repository: grafana/grafana
    # -- The grafana image tag.
    tag: 11.1.3

  # -- The grafana dashboard providers.
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: greptimedb-cluster-metrics
          orgId: 1
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/greptimedb-cluster-metrics
        - name: greptimedb-cluster-logs
          orgId: 1
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/greptimedb-cluster-logs
        - name: greptimedb-cluster-slow-queries
          orgId: 1
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/greptimedb-cluster-slow-queries

  # -- The grafana dashboards configmaps that will be created to store the dashboards.
  dashboardsConfigMaps:
    greptimedb-cluster-metrics: greptimedb-cluster-metrics-dashboard
    greptimedb-cluster-logs: greptimedb-cluster-logs-dashboard
    greptimedb-cluster-slow-queries: greptimedb-cluster-slow-queries-dashboard

  # -- The grafana datasources.
  datasources:
    datasources.yaml:
      datasources:
        # Query the cluster metrics.
        - name: metrics
          type: prometheus
          url: http://mycluster-monitor-standalone.default.svc.cluster.local:4000/v1/prometheus
          access: proxy
          isDefault: true

        # Query the cluster logs and slow queries.
        - name: logs
          type: mysql
          url: mycluster-monitor-standalone.default.svc.cluster.local:4002
          access: proxy
          database: public

        # Query the information schema from the cluster.
        - name: information_schema
          type: mysql
          url: mycluster-frontend.default.svc.cluster.local:4002
          access: proxy
          database: information_schema

  # -- Init chown data for grafana.
  initChownData:
    # -- Enable init chown data for grafana.
    enabled: false

  # -- The grafana persistence configuration.
  persistence:
    # -- Whether to enable the persistence for grafana.
    enabled: true
    # -- The access modes for the grafana persistence.
    accessModes:
      - ReadWriteOnce
    # -- The storage size for the grafana persistence.
    size: 10Gi

  # -- The grafana service configuration.
  service:
    # -- Whether to create the service for grafana.
    enabled: true
    # -- The type of the service.
    type: ClusterIP
    # -- The annotations for the grafana service.
    annotations: {}
