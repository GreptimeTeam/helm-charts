image:
  # -- The image registry
  registry: docker.io
  # -- The image repository
  repository: greptime/greptimedb
  # -- The image tag
  tag: "v0.5.0"
  # -- The image pull policy for the controller
  pullPolicy: IfNotPresent
  # -- The image pull secrets.
  pullSecrets: []

# -- Overrides the chart's name
nameOverride: ""

# -- Provide a name to substitute for the full names of resources
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # -- Service account name
  name: ""

# -- The container command
command: []

# -- The container args
args: []

# -- The extra configuration for greptimedb
configToml: |
  mode = 'standalone'

# -- Storage root directory
dataHome: "/data/greptimedb/"

# -- Environment variables
env:
  GREPTIMEDB_STANDALONE__HTTP__ADDR: "0.0.0.0:4000"
#  GREPTIMEDB_STANDALONE__GRPC__ADDR: "0.0.0.0:4001"
#  GREPTIMEDB_STANDALONE__MYSQL__ADDR: "0.0.0.0:4002"
#  GREPTIMEDB_STANDALONE__POSTGRES__ADDR: "0.0.0.0:4003"
#  GREPTIMEDB_STANDALONE__OPENTSDB__ADDR: "0.0.0.0:4242"
#  GREPTIMEDB_STANDALONE__HTTP__TIMEOUT: "120s"

#  GREPTIMEDB_STANDALONE__WAL__FILE_SIZE: "128MB"
#  GREPTIMEDB_STANDALONE__WAL__PURGE_THRESHOLD: "2GB"
#  GREPTIMEDB_STANDALONE__WAL__DIR: "/data/greptimedb/wal"

#  # configure to use local storage.
#  GREPTIMEDB_STANDALONE__STORAGE__TYPE: "File"

#  # configure to use aws s3 storage.
#  GREPTIMEDB_STANDALONE__STORAGE__TYPE: "S3"
#  GREPTIMEDB_STANDALONE__STORAGE__BUCKET: "aws_s3_name"
#  GREPTIMEDB_STANDALONE__STORAGE__ROOT: "/data"
#  GREPTIMEDB_STANDALONE__STORAGE__REGION: "aws_s3_region"
#  GREPTIMEDB_STANDALONE__STORAGE__ACCESS_KEY_ID: "aws_access_key_id"
#  GREPTIMEDB_STANDALONE__STORAGE__SECRET_ACCESS_KEY: "aws_secret_access_key"
#  GREPTIMEDB_STANDALONE__STORAGE__CACHE_PATH: "/data/greptimedb/s3cache"

#  # configure to use alicloud oss storage.
#  GREPTIMEDB_STANDALONE__STORAGE__TYPE: "Oss"
#  GREPTIMEDB_STANDALONE__STORAGE__BUCKET: "alicloud_oss_name"
#  GREPTIMEDB_STANDALONE__STORAGE__ROOT: "/data"
#  GREPTIMEDB_STANDALONE__STORAGE__REGION: "alicloud_oss_region"
#  GREPTIMEDB_STANDALONE__STORAGE__ACCESS_KEY_ID: "alicloud_access_key_id"
#  GREPTIMEDB_STANDALONE__STORAGE__ACCESS_KEY_SECRET: "alicloud_access_key_secret"
#  GREPTIMEDB_STANDALONE__STORAGE__ENDPOINT: "alicloud_oss_endpoint" # For example: oss-cn-hangzhou.aliyuncs.com, more detail see https://www.alibabacloud.com/help/en/oss/user-guide/regions-and-endpoints
#  GREPTIMEDB_STANDALONE__STORAGE__CACHE_PATH: "/data/greptimedb/osscache"

#  GREPTIMEDB_STANDALONE__STORAGE__GLOBAL_TTL: "1d"
#  GREPTIMEDB_STANDALONE__STORAGE__FLUSH__GLOBAL_WRITE_BUFFER_SIZE: "512MB"
#  GREPTIMEDB_STANDALONE__STORAGE__FLUSH__REGION_WRITE_BUFFER_SIZE: "256MB"
#  GREPTIMEDB_STANDALONE__STORAGE__FLUSH__AUTO_FLUSH_INTERVAL: "5m"
#  GREPTIMEDB_STANDALONE__STORAGE__FLUSH__MAX_FLUSH_TASKS: "2"
#  GREPTIMEDB_STANDALONE__STORAGE__COMPACTION__MAX_INFLIGHT_TASKS: "2"
#  GREPTIMEDB_DATANODE__STORAGE__MANIFEST__CHECKPOINT_MARGIN: "100"
#  GREPTIMEDB_DATANODE__STORAGE__MANIFEST__GC_DURATION: "5m"

# -- Maps all the keys on a configmap or secret as environment variables
envFrom: {}
#  - secretRef:
#      name: config

# -- Extra pod annotations to add
podAnnotations: {}

# -- Extra pod labels to add
podLabels: {}

# -- Security context to apply to the pod
podSecurityContext: {}
#  runAsUser: 1000
#  runAsGroup: 3000
#  fsGroup: 2000

# -- The annotations
annotations: {}
#  imageregistry: "https://hub.docker.com/"

# -- Security context to apply to the container
securityContext: {}
#  runAsUser: 1000
#  runAsGroup: 3000
#  fsGroup: 2000

# -- Resource requests and limits for the container
resources: {}
#  limits:
#    cpu: 800m
#    memory: 1Gi
#  requests:
#    cpu: 200m
#    memory: 512Mi

# -- NodeSelector to apply pod
nodeSelector: {}
#  disktype: ssd

# -- Tolerations to apply pod
tolerations: {}
#  - key: "key1"
#    operator: "Equal"
#    value: "value1"
#    effect: "NoSchedule"

# -- Affinity configuration for pod
affinity: {}
#  nodeAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#      nodeSelectorTerms:
#        - matchExpressions:
#            - key: topology.kubernetes.io/zone
#              operator: In
#              values:
#                - antarctica-east1
#                - antarctica-west1
#    preferredDuringSchedulingIgnoredDuringExecution:
#      - weight: 1
#        preference:
#          matchExpressions:
#            - key: another-node-label-key
#              operator: In
#              values:
#                - another-node-label-value

# -- Grace period to allow the single binary to shut down before it is killed
terminationGracePeriodSeconds: 30

persistence:
  # -- Enable persistent disk
  enabled: true
  # -- Enable StatefulSetAutoDeletePVC feature
  enableStatefulSetAutoDeletePVC: false
  # -- Size of persistent disk
  size: 10Gi
  # -- Storage class name
  storageClass: null
  # -- Selector for persistent disk
  selector: null
  # -- Mount path of persistent disk.
  mountPath: /data/greptimedb

monitoring:
  # -- Enable prometheus podmonitor
  enabled: false
  # -- PodMonitor annotations
  annotations: {}
  # -- PodMonitor labels
  labels: {}
  # -- PodMonitor scrape interval
  interval: 30s

# -- GreptimeDB http service port
httpServicePort: 4000
# -- GreptimeDB grpc service port
grpcServicePort: 4001
# -- GreptimeDB mysql service port
mysqlServicePort: 4002
# -- GreptimeDB postgres service port
postgresServicePort: 4003
# -- GreptimeDB opentsdb service port
opentsdbServicePort: 4242

service:
  # -- Service type
  type: ClusterIP
  # -- Annotations for service
  annotations: {}
