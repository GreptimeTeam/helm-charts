image:
  # -- The image registry
  registry: docker.io
  # -- The image repository
  repository: greptime/greptimedb
  # -- The image tag
  tag: "v0.14.3"
  # -- The image pull policy for the controller
  pullPolicy: IfNotPresent
  # -- The image pull secrets.
  pullSecrets: []

# -- Overrides the chart's name
nameOverride: ""

# -- Provide a name to substitute for the full names of resources
fullnameOverride: ""

# -- additional labels to add to all resources
additionalLabels: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # -- Service account name
  name: ""

# -- The container command
command: []

# -- The container args
args: []

# -- The extra configuration for greptimedb
configToml: |
  mode = 'standalone'

# -- Storage root directory
dataHome: "/data/greptimedb/"

# -- Configure to object storage
objectStorage:
#  credentials:
#    # AWS or AliCloud cloudProvider accessKeyID
#    accessKeyId: "you-should-set-the-access-key-id-here"

#    # AWS cloudProvider secretAccessKey
#    secretAccessKey: "you-should-set-the-secret-access-key-here"

#    # AliCloud cloudProvider secretAccessKey
#    accessKeySecret: "you-should-set-the-access-key-secret-here"

#    # Azure cloudProvider accountName and accountKey
#    accountName: "you-should-set-the-account-name-here"
#    accountKey: "you-should-set-the-account-key-here"

#    # GCP cloudProvider serviceAccountKey JSON-formatted base64 value
#    serviceAccountKey: "you-should-set-the-base64-service-account-key-here"

#    # Set the existing secret to get the key's of cloudProvider
#    existingSecretName: ""

  # configure to use s3 storage
  s3: {}
  #  bucket: "bucket-name"
  #  region: "us-west-2"

  #  # The data directory in S3 will be: 's3://<bucket>/<root>/data/...'.
  #  root: "greptimedb-standalone"
  #  endpoint: ""  # See more detail: https://docs.aws.amazon.com/general/latest/gr/s3.html

  #  The cache capacity
  #  cache_capacity = ""

  # configure to use oss storage
  oss: {}
  #  bucket: "bucket-name"
  #  region: "cn-hangzhou"

  #  # The data directory in OSS will be: 'oss://<bucket>/<root>/data/...'.
  #  root: "greptimedb-standalone"
  #  endpoint: "oss-cn-hangzhou.aliyuncs.com"

  #  The cache capacity
  #  cache_capacity = ""

  # configure to use gcs storage
  gcs: {}
  #  bucket: "bucket-name"
  #  scope: "" # example: "https://www.googleapis.com/auth/devstorage.read_write"

  #  # The data directory in gcs will be: 'gcs://<bucket>/<root>/data/...'.
  #  root: "greptimedb-standalone"
  #  endpoint: "https://storage.googleapis.com"

  #  The cache capacity
  #  cache_capacity = ""

  # configure to use azblob storage
  azblob: {}
  #  container: ""
  #  endpoint: ""
  #  root: "greptimedb-standalone"

  #  The cache capacity
  #  cache_capacity = ""

# -- Environment variables
env: {}
 # envKey: "envValue"

# -- Extra pod annotations to add
podAnnotations: {}

# -- Extra pod labels to add
podLabels: {}

# -- Security context to apply to the pod
podSecurityContext: {}
#  runAsUser: 1000
#  runAsGroup: 3000
#  fsGroup: 2000

# -- The annotations
annotations: {}
#  imageregistry: "https://hub.docker.com/"

# -- Security context to apply to the container
securityContext: {}
#  runAsUser: 1000
#  runAsGroup: 3000
#  fsGroup: 2000

# -- Resource requests and limits for the container
resources: {}
#  limits:
#    cpu: 800m
#    memory: 1Gi
#  requests:
#    cpu: 200m
#    memory: 512Mi

# -- NodeSelector to apply pod
nodeSelector: {}
#  disktype: ssd

# -- Volume mounts to add to the pods
extraVolumeMounts: []
# -- Volumes to add to the pods
extraVolumes: []

# -- Tolerations to apply pod
tolerations: {}
#  - key: "key1"
#    operator: "Equal"
#    value: "value1"
#    effect: "NoSchedule"

# -- Affinity configuration for pod
affinity: {}
#  nodeAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#      nodeSelectorTerms:
#        - matchExpressions:
#            - key: topology.kubernetes.io/zone
#              operator: In
#              values:
#                - antarctica-east1
#                - antarctica-west1
#    preferredDuringSchedulingIgnoredDuringExecution:
#      - weight: 1
#        preference:
#          matchExpressions:
#            - key: another-node-label-key
#              operator: In
#              values:
#                - another-node-label-value

# -- Grace period to allow the single binary to shut down before it is killed
terminationGracePeriodSeconds: 30

# -- PersistentVolumeClaimRetentionPolicyType is a string enumeration of the policies that will determine, when volumes from the VolumeClaimTemplates will be deleted when the controlling StatefulSet is deleted or scaled down.
persistentVolumeClaimRetentionPolicy:
  whenDeleted: Retain
  whenScaled: Retain

persistence:
  # -- Enable persistent disk
  enabled: true
  # -- Enable StatefulSetAutoDeletePVC feature
  enableStatefulSetAutoDeletePVC: false
  # -- Size of persistent disk
  size: 20Gi
  # -- Storage class name
  storageClass: null
  # -- Selector for persistent disk
  selector: null
  # -- Mount path of persistent disk.
  mountPath: /data/greptimedb

monitoring:
  # -- Enable prometheus podmonitor
  enabled: false
  # -- PodMonitor annotations
  annotations: {}
  # -- PodMonitor labels
  labels: {}
  # -- PodMonitor scrape interval
  interval: 30s

# -- GreptimeDB http service port
httpServicePort: 4000
# -- GreptimeDB grpc service port
grpcServicePort: 4001
# -- GreptimeDB mysql service port
mysqlServicePort: 4002
# -- GreptimeDB postgres service port
postgresServicePort: 4003

service:
  # -- Service type
  type: ClusterIP
  # -- Annotations for service
  annotations: {}

# -- The static auth for greptimedb, only support one user now(https://docs.greptime.com/user-guide/deployments/authentication/static).
auth:
  # -- Enable static auth
  enabled: false
  # -- The auth file path to store the auth info
  mountPath: "/etc/greptimedb/auth"
  # -- The auth file name, the full path is `${mountPath}/${fileName}`
  fileName: "passwd"
  # -- The users to be created in the auth file
  users:
    - username: "admin"
      password: "admin"
